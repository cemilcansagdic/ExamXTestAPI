// <auto-generated />
using System;
using ExamXTestAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExamXTestAPI.Migrations
{
    [DbContext(typeof(ExamXContext))]
    [Migration("20221011111616_12")]
    partial class _12
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExamXTestAPI.Models.AnsweredQuestion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuizResultID")
                        .HasColumnType("int");

                    b.Property<string>("Selected")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("QuizResultID");

                    b.ToTable("AnsweredQuestions");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.EFModels.PotentialAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.ToTable("PotentialAnswers");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.Question", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.QuizResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("QuizTakerID")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("QuizTakerID");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.Topic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Type").HasValue("User");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.EFModels.Student", b =>
                {
                    b.HasBaseType("ExamXTestAPI.Models.User");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.EFModels.Teacher", b =>
                {
                    b.HasBaseType("ExamXTestAPI.Models.User");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.AnsweredQuestion", b =>
                {
                    b.HasOne("ExamXTestAPI.Models.QuizResult", null)
                        .WithMany("AnsweredQuestions")
                        .HasForeignKey("QuizResultID");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.EFModels.PotentialAnswer", b =>
                {
                    b.HasOne("ExamXTestAPI.Models.Question", null)
                        .WithMany("PotentialAnswers")
                        .HasForeignKey("QuestionID");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.Question", b =>
                {
                    b.HasOne("ExamXTestAPI.Models.EFModels.Teacher", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.QuizResult", b =>
                {
                    b.HasOne("ExamXTestAPI.Models.User", "QuizTaker")
                        .WithMany()
                        .HasForeignKey("QuizTakerID");
                });

            modelBuilder.Entity("ExamXTestAPI.Models.Topic", b =>
                {
                    b.HasOne("ExamXTestAPI.Models.Subject", null)
                        .WithMany("Topics")
                        .HasForeignKey("SubjectID");
                });
#pragma warning restore 612, 618
        }
    }
}
